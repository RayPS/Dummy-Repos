var loadData, options, presets;

presets = {
  "1 Hour": {
    "period": "1min",
    "size": "60",
    "description": "60 Minutes"
  },
  "1 Day": {
    "period": "60min",
    "size": "24",
    "description": "24 Hours"
  },
  "1 Week": {
    "period": "1day",
    "size": "7",
    "description": "7 Days"
  },
  "1 Month": {
    "period": "1day",
    "size": "30",
    "description": "30 Days"
  }
};

loadData = function(preset, callback) {
  var api, baseURL, parameters, period, size, symbol;
  if (preset == null) {
    preset = "1 Hour";
  }
  period = presets[preset].period;
  size = presets[preset].size;
  symbol = "eosusdt";
  baseURL = "https://api.huobi.pro/market/history/kline";
  parameters = "period=" + period + "&size=" + size + "&symbol=" + symbol;
  api = baseURL + "?" + parameters;
  return $.getJSON(api, function(response) {
    var before, current, data, data_close, data_high, data_label, data_low, data_open, data_open_close_middle, datasets, i, index, item, j, labels, len, middle, price, ref, ref1, results;
    data = response.data;
    labels = (function() {
      results = [];
      for (var i = 0, ref = data.length; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this);
    data_label = [];
    data_high = [];
    data_low = [];
    data_open = [];
    data_close = [];
    data_open_close_middle = [];
    ref1 = data.reverse();
    for (index = j = 0, len = ref1.length; j < len; index = ++j) {
      item = ref1[index];
      data_label.push("" + index);
      data_high.push(item.high);
      data_low.push(item.low);
      data_open.push(item.open);
      data_close.push(item.close);
      middle = (item.open + item.close) / 2;
      data_open_close_middle.push(middle);
    }
    datasets = [
      {
        label: "High",
        data: data_high,
        borderColor: "transparent"
      }, {
        label: "Low",
        data: data_low,
        backgroundColor: "rgba(0, 0, 255, 0.5)",
        borderColor: "transparent",
        fill: "-1"
      }, {
        label: "(O + C) / 2",
        data: data_open_close_middle,
        backgroundColor: "transparent",
        borderColor: "white"
      }
    ];
    price = document.getElementById("price");
    before = parseFloat(price.innerHTML.replace("$", ""));
    current = data_close[data_close.length - 1];
    price.innerHTML = "$" + current;
    if (current > before) {
      price.style.color = "green";
    } else if (current < before) {
      price.style.color = "red";
    }
    return callback(datasets, labels);
  });
};

options = {
  legend: {
    display: false
  },
  elements: {
    line: {
      tension: 0
    },
    point: {
      radius: 0
    }
  },
  layout: {
    padding: {
      top: 30,
      bottom: 0,
      left: 0,
      right: 0
    }
  },
  scales: {
    yAxes: [
      {
        type: 'linear',
        position: 'right',
        gridLines: {
          color: "rgba(255, 255, 255, 0.2)"
        }
      }
    ],
    xAxes: [
      {
        gridLines: {
          color: "rgba(255, 255, 255, 0.2)"
        },
        ticks: {
          display: false
        }
      }
    ]
  },
  animation: {
    duration: 0
  },
  hover: {
    animationDuration: 0
  },
  responsiveAnimationDuration: 0,
  plugins: {
    filler: {
      propagate: true
    }
  }
};

window.onload = function() {
  var ctx, myChart;
  ctx = document.getElementById("myChart").getContext('2d');
  myChart = new Chart(ctx, {
    type: "line",
    data: {
      labels: [],
      datasets: []
    },
    options: options
  });
  setInterval(function() {
    return loadData($(".button.active").html(), function(datasets, labels) {
      myChart.data.labels = labels;
      myChart.data.datasets = datasets;
      return myChart.update();
    });
  }, 1000);
  return $(".button").click(function() {
    $(".button").removeClass("active");
    $(this).addClass("active");
    return $("#title").html("EOS/USDT (" + presets[this.innerHTML].description + ")");
  });
};

//# sourceMappingURL=data:application/json;base64,
